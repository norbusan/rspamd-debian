.include(duplicate=append,priority=0) "{= env.TESTDIR =}/configs/plugins.conf"

regexp {
  SA_BODY_WORD_BOUNDARY_ON_NEWLINE {
    re =  '/\bhello\s/{sa_body}',
    score = 0.0,
    description = 'Test if word boundary works correctly on sa_body regexes',
    group = 'body',
  }
  SA_BODY_WORD {
    re =  '/hello/{sa_body}',
    score = 0.0,
    description = 'Test if regex works at all in sa_body',
    group = 'body',
  }
  SA_BODY_WORD_WITH_NEWLINE {
    re =  '/helloworld/{sa_body}',
    score = 0.0,
    description = 'Test if regex matches word separated with newline (should not work!)',
    group = 'body',
  }
  SA_BODY_WORD_WITH_SPACE {
    re =  '/hello world/{sa_body}',
    score = 0.0,
    description = 'Test if regex matches word separated with newline (should work - newline is replaced with space)',
    group = 'body',
  }
  SA_BODY_WORD_WITH_SPACE_BOUNDARIES {
    re =  '/\bhello world\b/{sa_body}',
    score = 0.0,
    description = 'Test if regex matches word separated with newline (should work - newline is replaced with space)',
    group = 'body',
  }
  SA_BODY_WORD_WITH_SPACE_BOUNDARIES_2 {
    re =  '/\shello\sworld\s/{sa_body}',
    score = 0.0,
    description = 'Test if regex matches word separated with newline (should work - newline is replaced with space)',
    group = 'body',
  }
  SA_BODY_WORD_WITH_SPACE_BOUNDARIES_3 {
    re =  '/\shello\sworld\sthis\s/{sa_body}',
    score = 0.0,
    description = 'Test if regex matches word separated with newline (should work - newline is replaced with space)',
    group = 'body',
  }
  SA_BODY_WORD_WITH_SPACE_AND_DOT {
    re =  '/\bword\.\sagain\b/{sa_body}',
    score = 0.0,
    description = 'Test if regex matches word separated with newline (should work - newline is replaced with space)',
    group = 'body',
  }
}

options {
  dynamic_conf = "{= env.TESTDIR =}/configs/dynamic.conf";
}
dmarc { }
spf { }
dkim { }
modules {
    path = "{= env.TESTDIR =}/../../src/plugins/lua/"
}

lua = "{= env.TESTDIR =}/lua/regex_test.lua"
