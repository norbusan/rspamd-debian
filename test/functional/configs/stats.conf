options = {
	filters = ["spf", "dkim", "regexp"]
	url_tld = "{= env.TESTDIR =}/../lua/unit/test_tld.dat"
	pidfile = "{= env.TMPDIR =}/rspamd.pid"
	dns {
		retransmits = 10;
		timeout = 2s;
		fake_records = [{
			name = "example.net";
			type = txt;
			replies = ["v=spf1 -all"];
		}]
	}
}
logging = {
	type = "file",
	level = "debug"
	filename = "{= env.TMPDIR =}/rspamd.log"
}
metric = {
	name = "default",
	actions = {
		reject = 100500,
	}
	unknown_weight = 1
}

worker {
	type = normal
	bind_socket = "{= env.LOCAL_ADDR =}:{= env.PORT_NORMAL =}"
	count = 1
	keypair {
		pubkey = "{= env.KEY_PUB1 =}";
		privkey = "{= env.KEY_PVT1 =}";
	}
	task_timeout = 60s;
}
worker {
	type = controller
	bind_socket = "{= env.LOCAL_ADDR =}:{= env.PORT_CONTROLLER =}"
	count = 1
	keypair {
		pubkey = "{= env.KEY_PUB1 =}";
		privkey = "{= env.KEY_PVT1 =}";
	}
	secure_ip = ["127.0.0.1", "::1"];
	stats_path = "{= env.TMPDIR =}/stats.ucl";
}

classifier {
	languages_enabled = true;
	tokenizer {
		name = "osb";
		hash = {= env.STATS_HASH =};
		key = {= env.STATS_KEY =};
	}
	backend = "{= env.STATS_BACKEND =}";
	statfile {
		spam = true;
		symbol = BAYES_SPAM;
		size = 1M;
		server = {= env.REDIS_SERVER =}
	}
	statfile {
		spam = false;
		symbol = BAYES_HAM;
		size = 1M;
		server = {= env.REDIS_SERVER =}
	}

	cache {
		server = {= env.REDIS_SERVER =}
	}
}
lua = "{= env.TESTDIR =}/lua/test_coverage.lua";

settings {}
