options = {
  url_tld = "{= env.URL_TLD =}"
  pidfile = "{= env.TMPDIR =}/rspamd.pid"
  lua_path = "{= env.INSTALLROOT =}/share/rspamd/lib/?.lua"
  filters = [];
  explicit_modules = ["settings"];
}

logging = {
  type = "file",
  level = "debug"
  filename = "{= env.TMPDIR =}/rspamd.log"
  log_usec = true;
}
metric = {
  name = "default",
  actions = {
    reject = 100500,
    add_header = 50500,
  }
  unknown_weight = 1
}
worker {
  type = normal
  bind_socket = "{= env.LOCAL_ADDR =}:{= env.PORT_NORMAL =}"
  count = 1
  task_timeout = 10s;
}
worker {
  type = controller
  bind_socket = "{= env.LOCAL_ADDR =}:{= env.PORT_CONTROLLER =}"
  count = 1
  secure_ip = ["127.0.0.1", "::1"];
  stats_path = "{= env.TMPDIR =}/stats.ucl"
}

modules {
  path = "{= env.TESTDIR =}/../../src/plugins/lua/"
}

lua = "{= env.TESTDIR =}/lua/test_coverage.lua";

neural {
  rules {
      SHORT {
          train {
              learning_rate = 0.001;
              max_usages = 2;
              spam_score = 1;
              ham_score = -1;
              max_trains = 10;
              max_iterations = 250;
              store_pool_only = true;
          }
          symbol_spam = "NEURAL_SPAM_SHORT";
          symbol_ham = "NEURAL_HAM_SHORT";
          ann_expire = 86400;
          watch_interval = 0.5;
      }
      SHORT_PCA {
          train {
              learning_rate = 0.001;
              max_usages = 2;
              spam_score = 1;
              ham_score = -1;
              max_trains = 10;
              max_iterations = 250;
              store_pool_only = true;
          }
          symbol_spam = "NEURAL_SPAM_SHORT_PCA";
          symbol_ham = "NEURAL_HAM_SHORT_PCA";
          ann_expire = 86400;
          watch_interval = 0.5;
          max_inputs = 2;
      }
  }
  allow_local = true;

}
redis {
  servers = "{= env.REDIS_ADDR =}:{= env.REDIS_PORT =}";
  expand_keys = true;
}

lua = "{= env.TESTDIR =}/lua/neural.lua";
